(ns aoc2018.d18
  (:require [clojure.string :as str]))


(def example ".#.#...|#.\n.....#|##|\n.|..|...#.\n..|#.....#\n#.#|||#|#|\n...#.||...\n.|....|...\n||...#|.#|\n|.||||..|.\n...#.|..|.")


(def vectorize-input (comp (partial mapv vec) str/split-lines))


(vectorize-input example)

(defn neighbors [row col]
  (for [r (range (- row 1) (+ row 2))
        c (range (- col 1) (+ col 2))
        :when (not (and (= r row) (= c col)))]
    [r c]))


(defn neighboring-chars [landscape row col]
  (->> (neighbors row col)
       (keep (partial get-in landscape))
       frequencies))

(defn next-acre [landscape row col]
  (let [char->count (neighboring-chars landscape row col)
        char (get-in landscape [row col])]
    (case char
      \. (if (<= 3 (char->count \| 0)) \| \.)
      \| (if (<= 3 (char->count \# 0)) \# \|)
      \# (if (and (<= 1 (char->count \# 0))
                  (<= 1 (char->count \| 0)))
           \#
           \.))))


(next-acre (vectorize-input example) 0 0)


(defn next-generation [landscape]
  (mapv (fn [row]
          (mapv (partial next-acre landscape row)
                (range (count (nth landscape row)))))
        (range (count landscape))))

(def input ".||....##....|#|#.....|||...|............|......#.\n#....|#|..#....#....|...#.||...||..|||#|..#..|.##.\n.#|##|.#.|#|..|||....#|..|....|.##.#||#.|.#|..|..|\n|...|#.|...#..|...|#.|.#...##....|.||#...|...|...#\n.....|..#||..........###...#.||.###.|..#|#||..|#..\n|||.|##...|.|||#......###....|#.#|...|.#..|.|.|##.\n.......|.####.||##|.##....#............||#..#..|..\n..#|.|....#..|...|||..|...............|.|#..|.||#.\n.||#.#||.|.|.#.#|....#.#|..|.|#|.|.....|.#...|#..#\n......#..|...#....||#.#.#|..#...#.|||||..|#....|#|\n#.#|..#|#||#|||..#...#.........|.|..#...|......|.#\n|....|#..|##.....|...||.#....#......#...|..|#|#..#\n.|##.|...|......##.##.........#.#..|.||........|..\n.#||#.#...|.|.|.#|.#..|.|#..|##.|..|#....##.||....\n...|..|.#........#.|###|.#|...||.#....|..#.....#|.\n........#.###..###.....#....#|#|...#||..|..|....#|\n.|...........||.|...#|..|#....#|.#..|#..|..|.|.|..\n#.#..|.|||....|.....#|#...##.#......|..|..#..#.#|#\n.#|.#.........|.....##|##.#.#...#|...........#|#..\n..##|.|.|.##|.##..|..|...#|#..|.....|.|.#...#...||\n.|||..#.#.|.|#......####.........#|.|.#|.|.|.#.|..\n|#...|.........#.##..|....|....#|...||.#.|...|#.|#\n##.|.#..|#|#|#.|#.|##|..#.|..##.#....##.#...#|.|..\n.||#..#.#....|.#.#..#|.|.#|##|#.#||....#....#...|.\n#...#...|.|||.....#.|.#|..#......#.#...#.#|...|#||\n...##...|.#.##..||..#|.....|....#.##.#.|..|.|#.#.|\n..#..|...#.|..#......||....#.#|..##|.#....#.|.|...\n||.....|..|##.....##......#|.......|##.|.#.|.#.|..\n#|.|...|.|#...|...........#......|......|...#|.#..\n#|###|..#.##.||..#....|####.#.......#|..|...|.....\n........#.|.........#..##.#.#...|.#.....|.|.#.#|#.\n.##.##.#.|#|..#.###|...#....|#.|#.#|#....#.|...|..\n||...#......|||..#.|.||.|.|#..........#...#.|.|..#\n|.....|..|....#|.#|.#...|#..|#|#..#.###.|.....#.#.\n..#...|#..#...|||..###.|#.|..|......|.||....#.....\n.##.#||..#....#.#.|..|.....#...|..#.|....#..##..||\n........#..............#.||.#........|.|...|.|....\n..#.#..##..|.|..|#....||#...|.#...#|..|##..|...##|\n......#|##..#..........#...||.#|.||.|..|..|....|.#\n##..|.##|..#|#|#.|....|.#|..|#.#...#..##|#.##|.|..\n|...#.|.#.#..|..|....|#||...#..#....#..#|.......#.\n....#.###.#.|.....#.|.#.#.#...|.#|#...#|.....|.##.\n#......#..#.|.....||.#..|....|...#|||....|..|#.|..\n..|.#|##...#.#..#|...|........||#.#.#||.|#.#|#...|\n...|.|.#...|.|.....###|#.##|.#.....#|..|#|#|#.|#|.\n.##..|#.#..#....|#....|..|.||.#|..|.|.|.|..#.#.|..\n.#..|.|##||...|......|...#..#|.#....#...#|||...||.\n.|#.#....|#.#|.|....||.||.##|#...#.||.#.......#|..\n#...||.....|.|...|||...||....#..#....||.|#.|...|#.\n...|#..||....|#..|....|...|.||#..||..#.|..##......")



(comment
  (loop [landscape (vectorize-input input)
         seen {}
         round 0]
    (if-let [last-seen (get seen landscape)]
      [round last-seen]
      (recur (next-generation landscape) (assoc seen landscape round) (inc round))))

  (def woot nil)

  (loop [landscape (vectorize-input input)
         seen {}
         round 0]
    (let [seen' (assoc seen round landscape)]
      (if (= round 1000)
        (and (alter-var-root #'woot (constantly seen')) nil)
        (recur (next-generation landscape) seen' (inc round)))))


  (map #(do (println %) (= (get woot %) (get woot (- % 28)))) (range 1000 (+ 484 28) -1))

  (- 496 484)

  (% (- 1000 484))

  (first (filter #(= (get woot %) (get woot 1000)) (range 484 1001)))

  (and (def seen *1) nil)

  (mod 1000000000 512)
  (quot 1000000000 512)
  (- 512 484)

  (mod (- 1000000000 484) 28)


  (* 1953125 512)

  (def four-eighty-four (nth (iterate next-generation (vectorize-input input)) 484))

  (println four-eighty-four)

  (= (nth (iterate next-generation (vectorize-input input)) 485)
     (nth (iterate next-generation (vectorize-input input)) 513))

  (-> (nth (iterate next-generation (vectorize-input input)) (+ 484 12))
      flatten
      frequencies
      (select-keys [\| \#])
      vals
      (->> (reduce *))))
